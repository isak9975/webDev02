[ JCBC ]
    1. Java DataBase Connect : 자바 데이터베이스 연동
    2. 현재 자바 프로젝트의 jdbc 라이브러리 등록하기 , 프로젝트마다 진행하기, PCe변경 되거나 프로젝트 경로 변경될때 진행.
        1. mysql-connector-j-9.1.0.jar (다운로드)
        2. 현재 java 프로젝트내 임의 폴더 내 넣기
        3. 프로젝트내 넣어둔(복사한) mysql-connector-j-9.1.0 파일 오른쪽 클릭 -> 가장 하단의 [ 라이브러리추가 ] 클릭
        4.[ OK ]

    3. 계층간의 객체
        -DAO [ Data access Object ] -  데이터 접근 객체
        -DTO [ Data Transfer Object ] - 데이터 이동 객체 / DB에 접근하여 가져온 데이터를  View 에 이동하기 위해 사용.
        -Vo [Value Object ] - 값 자체 객체, (읽기모드 / setter 없음)
    4. DAO 에서 DB 연동
        1. 연동할 JDBC 라이브러리 클래스 로드하기
        Class.forName("com.mysql.cj.jdbc.Driver")
            mysql : com.mysql,jdbc.Driver , 클래스 패키지 경로
           oracle : oracle.jdbc.OracleDriver

       2.지정한 DB 서버와 계정 정보가 일치 했을때 DB 연동을 시도하고 성공시 연동객체를 반환한다.
       DriverManager.getConnection("DB SERVER URL","계정명","비밀번호");
        1. DB SERVER URL : jdbc:mysql://ip 주소:port 번호/db명
        -로컬 PC 기준 : jdbc:mysql://localhost:2206/db명
        2. 계정명 : admin
        3. 비밀번호 : 1234

    *인터페이스란? 하나의 객체를 이용하여 서로 다른 객체를 조작하기 위한 구조
                동일한 목적하의 서로 다른 행위/메소드 를 조작

        *리모컨 / 게임기 / 키보드(인터페이스)
        - 모든 pc 기임의 a,b,c, 키는 존재한다. 하지만 서로 다른 키는 서로 다른 행위를 한다.
        - 각 게임(객체)로 생각하고 각 게임(객체)를 인터페이스에 대입하여 서로 다른 게임을 하나의 인터페이스에 조작하기 위해서.


    5. JDBC 의 핵심 인터페이스 3개
        1. Connection 인터페이스:
            DB 와 연동 성공한 객체 정보를 가지고 조작/기능/메서드 제공하는 인터페이스
                Connection conn = DriverManager.getConnection(mysql)
                Connection conn = DriverManager.getConnection(oracle)
                Connection conn = DriverManager.getConnection(mariaDB)
                ----> 서로 다른 각 DB 회사에서 제공하는 클래스(만든사람이 다르므로 클래스는 다르다)
                      하지만 하나의 인터페이스로 서로 달느 회사의 클래스를 사용한다.

          (1)connection.prepareStatement(sql 들어 있는 String); : 기재한 SQL 을 매개변수로 전달하면 기재한 SQL 을 조작/기능/메소드 제공 객체 반환

                     //PreparedStatement ps = connection.prepareStatement(sql);
                     //String sql = "insert into board(content,writer,pwd)values(?,?,?)";

        2. PreparedStatement 인터페이스 : 기재된 SQL 을 조작/메서드 제공하는 인터페이스
            (1) ps.setXXX(?,value)
                -> XXX : 데이터 타입(ex - String, int)
                -> ? : 기재된 SQL 내 ?의 순서번호
                -> value : 앞 매개변수 ?에 대입할 값
                //ps.setString(1, boardDto.getContent());

            (2) px.executeUpdate(); 현재 기재된 SQL 을 실행하는 함수
            (3) ps.executeQuery(); 현재 기재된 SQL 을 실행하고 조회된 결과를 반환하는 함수.
                //ResultSet rs = ps.executeQuery()

        3. ResultSet 인터페이스 : 실행은  SQL 조회 결과를 조작하는 인터페이스
            (1)rs.next(); 조회된 결과의 다른 레코드 이동함수
                만약에 다른 레코드가 존재하면 true 존재하지 않으면 false == 한줄씩 이동한다고 생각하면 될듯
            (2)rs.getXXX("필드명") :
                rs.getString String
                rs.getInt


1. BoardService1 : 변수
2. BoardService2 : 배열
3. BoardService3 : 객체/배열
4. BoardService4 : 객체/가변길이
5. BoardService5 : 객체/ArrayList(컬렉션프레임워크)
6. BoardService6 : 객체/ArrayList(컬렉션프레임워크) /setter,getter,toString
7. BoardService7 : 객체/ArrayList(컬렉션프레임워크) /setter,getter,toString/static/메소드
8. BoardService8 : 객체/ArrayList(컬렉션프레임워크) /setter,getter,toString/MVC디자인패턴, 싱글턴패턴
9. BoardService9 : 객체/ArrayList(컬렉션프레임워크) /setter,getter,toString/MVC디자인패턴, 싱글턴패턴 / 파일 처리
10. BoardService10 : 객체/ArrayList(컬렉션프레임워크) /setter,getter,toString/MVC디자인패턴, 싱글턴패턴 / DB 연동
