[ 소프트웨어/ 프로그램 개발시 사용되는 반복 작업/패턴 ]
    1. "면접"관이 본인이 알고 있는 디자인 패턴이 몇개 있는지 물어볼수 있다.(많이 있다)
-MVC 디자인 패턴
    1. 사용목적 : 프로젝트를 구성할때 복잡한 코드와 class 파일들을 MVC 패턴에 따라 구성한느 방법
        -구분을 안해도 코드를 읽어보면 무슨 코드인지 아는데
        -협업에서는 다양한 사람들이 동일한 프로젝트를 하면서 서로 다른 코드를 작성하는데 구분방법
        -하나로 파일에서 작성된 코드를 목적/사용에 따라 MVC 구성요소로 분리
    2. 장점 : 유지보수, 협업, 단일기능구성(모듈)
        완제품 : 피규어, 모듈제품 : 레고 조각
    3. 단점 : 클래스/ .java 파일/패키지 등등 파일 구분이 많아서 파일 관리가 어렵다.

    4. 구성 종류, 각 구성별로 역활의 책임이 존재한다
        -M(Model) : 모델 : 데이터 관리
            -DTO(Data Transfer Object = 데이터 이동 객체)
            -Vo(value Object = 값객체 , setter 함수가 존재하지 않는 읽기모드 객체)
            -DAO(Data access Object = 데이터 접근 객체, 주로 데이터베이스 접근 객체)

        -V(View) : 뷰(화면) : 입출력 담당(추후에 HTML/ CSS/ JS 프론트엔드)
            -(콘솔기준) : scanner, print 만 사용

        -C(Controller) : 제어 : Model 과 View 사이 에서의 제어과 전달 담당
            -view 로부터 전달 받은 데이터를 Model(DAO) 에게 전달하는 역활
            -데이터 유효성 검사

    5. MVC 패터너 과 싱글톤 채턴과 관계
        -view 클래스와 ctroller 클래스와 Dao 클래스는 싱글톤을 사용한다. 클래스는 정보가 아닌 기능이므로 1개만 있어도 된다
        -Dto는 각 데이터들의 고유한 정보이므로 싱글톤을 사용하지 않는다. 여러개 정보들은 각각 다른 정보이므로 1개가 아니다.


-싱글(혼자)톤(객체) 패턴
    -프로젝트내 하나의 객체만 가질수 있도록 만드는 패턴
    1.목적 : 무의미한 객체가 많아지면 객체 관리가 힘들고, 굳이 객체가 많이 필요 없을때 사용, 즉] 객체가 1개만 필요할때 사용
    2.장점 : 객체 1개 존재하므로 관리 편하다 **객체 정보 공유**
    3.단점 : 메모리 효율성이 좋지 못하다
    4.구성방법
        1. 싱글톤을 만들 클래스에서 현재 private static클래스의 객체를 생성한다.
        2. 생성자를 외부로부커 차단한다. 생성자를 private 만든다.
        3. private static 싱글톤 객체를 외부로 부터 접근할수 있도록 싱글톤 getter함수를 만든다.
            public class 클래스면 {
                private static 클래스명 싱글톤 변수명 = new 클래스명();
                private 클래스명(){}
                public static 클래스명 get싱글톤변수명(){
                    return this.실글콘변수명;
                }
            }
    기능 - 싱글톤
    데이터 - 여러개